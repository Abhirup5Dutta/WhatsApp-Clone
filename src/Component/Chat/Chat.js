import React, { useState, useEffect, createRef } from 'react'
import './Chat.css';
import { Avatar, Button, IconButton } from '@material-ui/core';
import SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';
import AttachFileIcon from '@material-ui/icons/AttachFile';
import MoreVertIcon from '@material-ui/icons/MoreVert';
import InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';
import MicIcon from '@material-ui/icons/Mic';
import SendIcon from '@material-ui/icons/Send';
import { useParams } from 'react-router-dom';
import { makeStyles } from '@material-ui/core/styles';
import Modal from '@material-ui/core/Modal';
import db, { storage } from '../../firebase';
import { useStateValue } from '../../StateProvider';
import firebase from 'firebase';
import Picker from "emoji-picker-react";

function getModalStyle() {
    const top = 50;
    const left = 50;

    return {
        height: '300px',
        top: `${top}%`,
        left: `${left}%`,
        transform: `translate(-${top}%, -${left}%)`,
    };
}

const useStyles = makeStyles((theme) => ({
    paper: {
        position: 'absolute',
        width: 400,
        height: 200,
        backgroundColor: theme.palette.background.paper,
        border: '2px solid #000',
        boxShadow: theme.shadows[5],
        padding: theme.spacing(2, 4, 3),
    },
}));

function Chat() {
    const classes = useStyles();
    const [modalStyle] = useState(getModalStyle);
    const inputRef = createRef();
    const [input, setInput] = useState('');
    // Hook to get the url after the address we mentioned is useParams(). Here we have given roomId because it has to match whatever we have given in the route method.
    const { roomId } = useParams();
    const [roomName, setRoomName] = useState('');
    const [messages, setMessages] = useState([]);
    const [image, setImage] = useState(null);
    const [pickerVisible, togglePicker] = useState(false);
    const [open, setOpen] = useState(false);
    const [progress, setProgress] = useState(0);
    const [{ user }, dispatch] = useStateValue();
    const imageName = Date().toLocaleString() + '_' + image?.name;

    useEffect(() => {
        if (roomId) {
            db.collection('rooms').doc(roomId).onSnapshot((snapshot) => setRoomName(snapshot.data().name));

            db.collection('rooms').doc(roomId).collection('messages').orderBy('timestamp', 'asc').onSnapshot((snapshot) => setMessages(snapshot.docs.map(doc => doc.data())));
        }
    }, [roomId]);

    useEffect(() => {
        if (image) {
            setOpen(true);
        }
    }, [image]);

    useEffect(() => {
        if (progress === 100) {
            setOpen(false);
        }
    }, [progress]);

    useEffect(() => {
        if (!open) {
            setImage(null);
        }
    }, [open]);

    const sendMessage = (e) => {
        e.preventDefault();
        // console.log('You typed >>>', input);

        if (input) {
            db.collection('rooms').doc(roomId).collection('messages').add({
                message: input,
                name: user.displayName,
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                email: user.email,
                type: 'str',
            })
            setInput('');
        }
    }

    const handleChange = (e) => {
        if (e.target.files[0]) {
            setImage(e.target.files[0]);
        }
    }

    const handleUpload = () => {
        // image.name is the file name with which it is passed to the database
        const uploadTask = storage.ref(`images/${imageName}`).put(image);
        uploadTask.on(
            "state_changed",
            (snapshot) => {
                // Progress function...
                const progress = Math.round(
                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100
                );
                setProgress(progress);
            },
            (error) => {
                // Error function
                console.log(error);
                alert(error.message);
            },
            // Final part when upload completes
            () => {
                // Complete function
                storage.ref('images').child(imageName).getDownloadURL().then(url => {
                    db.collection('rooms').doc(roomId).collection('messages').add({
                        // Using server timestamp which in this case is generated by server firebase to load the posts according to the time with the recent coming at the top
                        message: url,
                        name: user.displayName,
                        timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                        email: user.email,
                        type: 'imgurl',
                    });

                    setProgress(0);
                    setImage(null);

                });
            }
        )
    }

    return (
        <div className='chat'>

            <Modal
                open={open}
                onClose={() => setOpen(false)}
            >
                <div style={modalStyle} className={classes.paper}>
                    <div className='imageUpload'>
                        <center>
                            <img src="https://i.pinimg.com/originals/79/dc/31/79dc31280371b8ffbe56ec656418e122.png" alt="WhatsApp logo" className="modal__headerImage" />
                        </center>

                        {/* Progress bar */}
                        <progress className='imageUpload__progress' value={progress} max='100' />

                        <Button style={{ cursor: 'pointer', color: 'white', backgroundColor: 'green' }} disabled={!image} className='imageupload__button' onClick={handleUpload}>Upload</Button>
                        {/* Post Button */}
                    </div>
                </div>
            </Modal>

            <div className="chat__header">
                <Avatar src={`https://avatars.dicebear.com/api/human/${roomId}.svg`} />

                <div className="chat__headerInfo">
                    <h3>{roomName}</h3>
                    <p>
                        Last seen{" "}
                        {
                            new Date(messages[messages.length - 1]?.timestamp?.toDate()).toUTCString()
                        }
                    </p>
                </div>

                <div className="chat__headerRight">
                    <IconButton>
                        <SearchOutlinedIcon />
                    </IconButton>
                    <IconButton>
                        <AttachFileIcon />
                    </IconButton>
                    <IconButton>
                        <MoreVertIcon />
                    </IconButton>
                </div>
            </div>

            <div className="chat__body" onClick={() => togglePicker(false)}>
                {
                    messages.map((message) => (
                        <p className={`chat__message ${message.email === user.email && 'chat__receiver'}`}>
                            <span className="chat__name">{message.name}</span>
                            {
                                (message.type === 'str') ?
                                    (
                                        message.message
                                    ) : (
                                        <img src={message.message} alt='message pic' className='chat__image' />
                                    )
                            }
                            <span className="chat__timestamp">
                                {
                                    new Date(message.timestamp?.toDate()).toUTCString()
                                }
                            </span>
                        </p>
                    ))
                }

            </div>

            <div className="chat__footer">
                {pickerVisible && (
                    <Picker
                        pickerStyle={{ position: "absolute", bottom: "120px" }}
                        onEmojiClick={(e, emoji) => {
                            const ref = inputRef.current;
                            ref.focus();
                            const start = input.substring(0, ref.selectionStart);
                            const end = input.substring(ref.selectionStart);
                            const text = start + emoji.emoji + end;
                            setInput(text);
                        }}
                    />
                )}
                <IconButton>
                    <InsertEmoticonIcon onClick={() => togglePicker((pickerVisible) => !pickerVisible)} />
                </IconButton>

                <IconButton>
                    <label htmlFor="upload-photo" style={{ cursor: 'pointer' }}>
                        <input type="file" style={{ display: "none" }} id="upload-photo" name="upload-photo" accept="image/*" onChange={handleChange} />
                        <AttachFileIcon />

                    </label>
                </IconButton>

                <form>
                    <input value={input} onClick={() => togglePicker(false)} onChange={e => setInput(e.target.value)} ref={inputRef} type="text" placeholder='Type a message' />
                    <button className='chat__footerBtn' onClick={sendMessage} type='submit'>Send a message</button>
                    <IconButton>
                        <SendIcon onClick={sendMessage} fontSize='large' />
                    </IconButton>
                </form>

                <IconButton>
                    <MicIcon />
                </IconButton>
            </div>

        </div>
    )
}

export default Chat
